import React, { useEffect, useState } from "react";
import { Layout, Navbar } from "~/components";
import Head from "next/head";
import { authenticateRoute } from "~/lib/authenticate";
import {
  IFeedModel,
  IInitialValuesJasa,
  IInitialValuesPenawaran,
  IServiceModel,
  IUserModel,
  MODAL_FORM_JASA,
  MODAL_FORM_PENAWARAN,
} from "./utils/types";
import {
  deleteJasa,
  deletePenawaran,
  fetchListJasa,
  fetchListPenawaran,
  fetchUserDetail,
} from "./utils/api";
import styles from "./ProfilePage.module.scss";
import ProfileUserCard from "./ProfileUserCard";
import FormUpdateProfile from "./FormUpdateProfile";
import DefaultButton from "~/components/button/DefaultButton";
import ProfilePageListJasa from "./ProfilePageListJasa";
import { openModal } from "~/components/modal/DefaultModal";
import ProfilePageFormJasa from "./ProfilePageFormJasa";
import { toastError, toastSucces } from "~/lib/helpers";
import ProfilePageListPenawaran from "./ProfilePageListPenawaran";
import ProfilePageFormPenawaran from "./ProfilePageFormPenawaran";

const initialUser: IUserModel = {
  name: "",
  city: "",
  no_hp: "",
  image: "",
  description: "",
  email: "",
};

function ProfilePage() {
  const [user, setUser] = useState<IUserModel>(initialUser);
  const [initialJasa, setInitialJasa] = useState<IInitialValuesJasa>({
    id: "",
    title: "",
    description: "",
    waktu_panen: [],
    jenis_budidaya: [],
  });

  const [initialPenawaran, setInitialPenawaran] =
    useState<IInitialValuesPenawaran>({
      id: "",
      name: "",
      min_budget: "",
      max_budget: "",
      status: "draft",
      weight: "",
      description: "",
      publish_date: "",
      publish_limit: "",
    });

  const [rowsJasa, setRowsJasa] = useState<IFeedModel[]>([]);
  const [rowsPenawaran, setRowsPenawaran] = useState<IServiceModel[]>([]);

  const setListJasa = async () => {
    const response = await fetchListJasa();
    if (response.state) {
      setRowsJasa(response.data);
    } else {
      setRowsJasa([]);
    }
  };

  const setListPenawaran = async () => {
    const response = await fetchListPenawaran();
    if (response.state) {
      setRowsPenawaran(response.data);
    } else {
      setRowsPenawaran([]);
    }
  };

  const fetchUser = async () => {
    try {
      const response = await fetchUserDetail();
      if (response.state) {
        setUser(response.data);
      }
    } catch (error) {
      setUser(initialUser);
    }
  };

  useEffect(() => {
    fetchUser();
  }, []);

  const handleClickUpdateJasa = async (row: IFeedModel) => {
    setInitialJasa({
      title: row.title,
      description: row.description,
      waktu_panen: row.harvest_time.split(","),
      jenis_budidaya: row.type_cultivation.split(","),
      id: row.id,
    });
    openModal(MODAL_FORM_JASA);
  };

  const handleClickDeleteJasa = async (id: string) => {
    const response = await deleteJasa(id);
    if (response.state) {
      toastSucces(response.message);
      setListJasa();
    } else {
      toastError(response.message);
    }
  };

  const handleClickUpdatePenawaran = async (row: IServiceModel) => {
    setInitialPenawaran({
      name: row.name,
      description: row.description,
      publish_date: row.publish_date,
      publish_limit: row.publish_limit,
      min_budget: row.min_budget,
      max_budget: row.max_budget,
      status: row.status,
      id: row.id,
      weight: row.weight,
    });
    openModal(MODAL_FORM_PENAWARAN);
  };

  const handleClickDeletePenawaran = async (id: string) => {
    const response = await deletePenawaran(id);
    if (response.state) {
      toastSucces(response.message);
      setListPenawaran();
    } else {
      toastError(response.message);
    }
  };

  return (
    <>
      <Head>
        <title>Profle | Lofiators</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Navbar />

      <Layout classNames={styles.ProfilePage}>
        <section className={styles.ProfilePageUser}>
          <ProfileUserCard
            name={user.name}
            city={user.city}
            email={user.email}
            image={user.image}
            no_hp={user.no_hp}
            description={user.description}
          />
        </section>

        <section className={styles.ProfilePageJasa}>
          <div className='flex justify-between h-8 mb-4'>
            <div>
              <p className='text-base font-medium'>List Jasa</p>
            </div>
            <DefaultButton
              label='Tambah'
              className='bg-indigo-500 hover:bg-indigo-700'
              onClick={() => openModal(MODAL_FORM_JASA)}
            />
          </div>

          <ProfilePageListJasa
            handleClickUpdate={handleClickUpdateJasa}
            handleClickDelete={handleClickDeleteJasa}
            setListJasa={setListJasa}
            rows={rowsJasa}
          />
        </section>

        <section className={styles.ProfilePagePenawaran}>
          <div className='flex justify-between h-8 mb-4'>
            <div>
              <p className='text-base font-medium'>List Penawawan</p>
            </div>
            <DefaultButton
              label='Tambah'
              className='bg-indigo-500 hover:bg-indigo-700'
              onClick={() => openModal(MODAL_FORM_PENAWARAN)}
            />
          </div>

          <ProfilePageListPenawaran
            handleClickUpdate={handleClickUpdatePenawaran}
            handleClickDelete={handleClickDeletePenawaran}
            setListPenawaran={setListPenawaran}
            rows={rowsPenawaran}
          />
        </section>
      </Layout>

      <FormUpdateProfile user={user} fetchUser={fetchUser} />
      <ProfilePageFormJasa
        initialValues={initialJasa}
        setListJasa={setListJasa}
      />

      <ProfilePageFormPenawaran
        initialValues={initialPenawaran}
        setListPenawaran={setListPenawaran}
      />
    </>
  );
}

export default authenticateRoute(ProfilePage);
